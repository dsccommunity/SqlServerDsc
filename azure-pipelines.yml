trigger:
  branches:
    include:
    - main
  paths:
    include:
    - source/*
  tags:
    include:
    - "v*"
    exclude:
    - "*-*"
variables:
  buildFolderName: output
  buildArtifactName: output
  testResultFolderName: testResults
  testArtifactName: testResults
  sourceFolderName: source

stages:
  - stage: Build
    jobs:
      - job: Package_Module
        displayName: 'Package Module'
        pool:
          vmImage: 'ubuntu 18.04'
        steps:
          - task: GitVersion@5
            name: gitVersion
            displayName: 'Evaluate Next Version'
            inputs:
              runtime: 'core'
              configFilePath: 'GitVersion.yml'
          - task: PowerShell@2
            name: package
            displayName: 'Build & Package Module'
            inputs:
              filePath: './build.ps1'
              arguments: '-ResolveDependency -tasks pack'
              pwsh: true
            env:
              ModuleVersion: $(gitVersion.NuGetVersionV2)
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Build Artifact'
            inputs:
              targetPath: '$(buildFolderName)/'
              artifact: $(buildArtifactName)
              publishLocation: 'pipeline'
              parallel: true

  - stage: Test
    dependsOn: Build
    jobs:
      - job: Test_HQRM
        displayName: 'HQRM'
        pool:
          vmImage: 'windows-2022'
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - pwsh: |
              # Workaround for issue https://github.com/dsccommunity/DscResource.Test/issues/100
              ./build.ps1 -Task noop
              Invoke-Pester -Script .\tests\QA -EnableExit
            name: qualitytest
            displayName: 'Run SqlServerDsc QA Test'
          - task: PowerShell@2
            name: test
            displayName: 'Run HQRM Test'
            inputs:
              filePath: './build.ps1'
              arguments: '-Tasks hqrmtest'
              pwsh: false
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: 'output/testResults/NUnit*.xml'
              testRunTitle: 'HQRM'

      - job: Test_Unit
        displayName: 'Unit'
        pool:
          vmImage: 'windows-2022'
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: test
            displayName: 'Run Unit Test'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks test -PesterScript 'tests/Unit'"
              pwsh: true
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'Unit (Windows Server 2019)'
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Test Artifact'
            inputs:
              targetPath: '$(buildFolderName)/$(testResultFolderName)/'
              artifactName: $(testArtifactName)
              parallel: true

      - job: Test_Integration
        displayName: 'Integration'
        strategy:
          matrix:
            SQL2016_WIN2019:
              JOB_VMIMAGE: 'windows-2019'
              TEST_CONFIGURATION: 'Integration_SQL2016'
            SQL2016_WIN2022:
              JOB_VMIMAGE: 'windows-2022'
              TEST_CONFIGURATION: 'Integration_SQL2016'
            SQL2017_WIN2019:
              JOB_VMIMAGE: 'windows-2019'
              TEST_CONFIGURATION: 'Integration_SQL2017'
            SQL2017_WIN2022:
              JOB_VMIMAGE: 'windows-2022'
              TEST_CONFIGURATION: 'Integration_SQL2017'
            SQL2019_WIN2019:
              JOB_VMIMAGE: 'windows-2019'
              TEST_CONFIGURATION: 'Integration_SQL2019'
            SQL2019_WIN2022:
              JOB_VMIMAGE: 'windows-2022'
              TEST_CONFIGURATION: 'Integration_SQL2019'
        pool:
          vmImage: $(JOB_VMIMAGE)
        timeoutInMinutes: 0
        variables:
          # This sets environment variable $env:CI.
          CI: true
          # This sets environment variable $env:CONFIGURATION.
          configuration: $(TEST_CONFIGURATION)
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: configureWinRM
            displayName: 'Configure WinRM'
            inputs:
              targetType: 'inline'
              script: 'winrm quickconfig -quiet'
              pwsh: false
          - powershell: |
              ./build.ps1 -Tasks test -CodeCoverageThreshold 0 -PesterScript @(
                  # Run the integration tests in a specific group order.
                  # Group 1
                  'tests/Integration/DSC_SqlSetup.Integration.Tests.ps1'
                  # Group 2
                  'tests/Integration/DSC_SqlAgentAlert.Integration.Tests.ps1'
                  'tests/Integration/DSC_SqlLogin.Integration.Tests.ps1'
                  'tests/Integration/DSC_SqlEndpoint.Integration.Tests.ps1'
                  'tests/Integration/DSC_SqlDatabaseMail.Integration.Tests.ps1'
                  'tests/Integration/DSC_SqlRSSetup.Integration.Tests.ps1'
                  'tests/Integration/DSC_SqlDatabaseDefaultLocation.Integration.Tests.ps1'
                  'tests/Integration/DSC_SqlDatabase.Integration.Tests.ps1'
                  'tests/Integration/DSC_SqlAlwaysOnService.Integration.Tests.ps1'
                  'tests/Integration/DSC_SqlAgentOperator.Integration.Tests.ps1'
                  'tests/Integration/DSC_SqlServiceAccount.Integration.Tests.ps1'
                  'tests/Integration/DSC_SqlAgentFailsafe.Integration.Tests.ps1'
                  # Group 3
                  'tests/Integration/DSC_SqlRole.Integration.Tests.ps1'
                  'tests/Integration/DSC_SqlRS.Integration.Tests.ps1'
                  'tests/Integration/DSC_SqlDatabaseUser.Integration.Tests.ps1'
                  'tests/Integration/DSC_SqlReplication.Integration.Tests.ps1'
                  # Group 4
                  'tests/Integration/DSC_SqlScript.Integration.Tests.ps1'
                  'tests/Integration/DSC_SqlDatabasePermission.Integration.Tests.ps1'
                  # Group 5
                  'tests/Integration/DSC_SqlSecureConnection.Integration.Tests.ps1'
                  'tests/Integration/DSC_SqlScriptQuery.Integration.Tests.ps1'
                  'tests/Integration/DSC_SqlProtocol.Integration.Tests.ps1'
                  # Group 6 (tests makes changes that could make SQL Server to loose connectivity)
                  'tests/Integration/DSC_SqlProtocolTcpIp.Integration.Tests.ps1'
                  'tests/Integration/DSC_SqlDatabaseObjectPermission.Integration.Tests.ps1'
              )
            name: test
            displayName: 'Run Integration Test'
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'Integration ($(TEST_CONFIGURATION) / $(JOB_VMIMAGE))'

      - job: Code_Coverage
        displayName: 'Publish Code Coverage'
        dependsOn: Test_Unit
        pool:
          vmImage: 'ubuntu 18.04'
        timeoutInMinutes: 0
        steps:
          - pwsh: |
              $repositoryOwner,$repositoryName = $env:BUILD_REPOSITORY_NAME -split '/'
              echo "##vso[task.setvariable variable=RepositoryOwner;isOutput=true]$repositoryOwner"
              echo "##vso[task.setvariable variable=RepositoryName;isOutput=true]$repositoryName"
            name: dscBuildVariable
            displayName: 'Set Environment Variables'
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Test Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(testArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)'
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage to Azure DevOps'
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/JaCoCo_coverage.xml'
              pathToSources: '$(Build.SourcesDirectory)/$(sourceFolderName)/'
          - script: |
              bash <(curl -s https://codecov.io/bash) -f "./$(buildFolderName)/$(testResultFolderName)/JaCoCo_coverage.xml" -F unit
            displayName: 'Publish Code Coverage to Codecov.io'

  - stage: Deploy
    dependsOn: Test
    condition: |
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        ),
        contains(variables['System.TeamFoundationCollectionUri'], 'dsccommunity')
      )
    jobs:
      - job: Deploy_Module
        displayName: 'Deploy Module'
        pool:
          vmImage: 'ubuntu 18.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: publishRelease
            displayName: 'Publish Release'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks publish'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              GalleryApiToken: $(GalleryApiToken)
              ReleaseBranch: main
              MainGitBranch: main
          - task: PowerShell@2
            name: sendChangelogPR
            displayName: 'Send Changelog PR'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks Create_ChangeLog_GitHub_PR'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              ReleaseBranch: main
              MainGitBranch: main
