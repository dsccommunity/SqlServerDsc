name: 'Copilot Setup Steps'
env:
  MODULE_NAME: 'SqlServerDsc'

# This workflow sets up a complete development environment for the PowerShell module project
# when executed by GitHub Copilot Agent for development assistance.

on:
  workflow_dispatch:
  pull_request:
    paths:
      - '.github/workflows/copilot-setup-steps.yml'
  push:
    paths:
      - '.github/workflows/copilot-setup-steps.yml'

# cSpell: ignore unshallow LASTEXITCODE PSDSC
jobs:
  copilot-setup-steps:
    name: Setup PowerShell Development Environment
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for GitVersion

      # This step is needed for GitVersion because Copilot switches to its working branch
      # after checkout and fetches only depth 2.
      - name: Ensure full history for GitVersion
        shell: pwsh
        run: |
          Write-Host 'Ensuring full history for GitVersion...' -ForegroundColor Green

          $isShallow = (& git rev-parse --is-shallow-repository) -eq 'true'

          if ($isShallow)
          {
              Write-Host 'Repository is shallow. Fetching full history and tags...' -ForegroundColor DarkGray

              git fetch --prune --unshallow --tags --no-recurse-submodules

              if ($LASTEXITCODE -ne 0)
              {
                  throw 'git fetch --unshallow failed'
              }
          }
          else
          {
              Write-Host 'Repository is not shallow. Refreshing tags...' -ForegroundColor DarkGray

              git fetch --prune --tags --no-recurse-submodules

              if ($LASTEXITCODE -ne 0)
              {
                  throw 'git fetch --tags failed'
              }
          }

          Write-Host 'History ready for GitVersion.' -ForegroundColor Green

      - name: Install Linux Dependencies
        shell: bash
        run: |
          echo -e "\033[32mInstalling Linux dependencies for PowerShell DSC...\033[0m"

          # Update package list
          echo "::group::Update package list"
          echo -e "\033[36mUpdating package list...\033[0m"
          sudo apt-get update
          echo -e "\033[32mâœ“ Package list updated successfully\033[0m"
          echo "::endgroup::"

          # Check if Microsoft repository is already added, if not add it
          if ! grep -q "packages.microsoft.com" /etc/apt/sources.list /etc/apt/sources.list.d/* 2>/dev/null; then
            echo "::group::Add Microsoft repository"
            echo -e "\033[33mAdding Microsoft repository...\033[0m"
            # Add Microsoft's GPG key and repository (keyring)
            sudo install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/keyrings/microsoft.gpg >/dev/null
            sudo chmod a+r /etc/apt/keyrings/microsoft.gpg
            DISTRO_CODENAME="$(lsb_release -cs)"
            echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/microsoft-ubuntu-${DISTRO_CODENAME}-prod ${DISTRO_CODENAME} main" | sudo tee "/etc/apt/sources.list.d/microsoft-${DISTRO_CODENAME}-prod.list" >/dev/null

            # Update package list again after adding the new repo
            echo -e "\033[36mUpdating package list after adding Microsoft repository...\033[0m"
            sudo apt-get update
            echo -e "\033[32mâœ“ Microsoft repository added successfully\033[0m"
            echo "::endgroup::"
          else
            echo -e "\033[33mMicrosoft repository already configured, skipping...\033[0m"
            echo "::notice::Microsoft repository was already configured"
          fi

          # Install OMI (Open Management Infrastructure) which provides libmi
          echo "::group::Install OMI and dependencies"
          if apt-cache policy omi 2>/dev/null | grep -q 'Candidate:'; then
            echo -e "\033[36mInstalling OMI package...\033[0m"
            if ! sudo apt-get install -y omi; then
              echo -e "\033[31mâš  OMI package failed to install; continuing...\033[0m"
              echo "::warning::OMI package failed to install; continuing without OMI"
            else
              echo -e "\033[32mâœ“ OMI package installed successfully\033[0m"
            fi
          else
            echo -e "\033[33mPackage 'omi' not found in repositories; skipping OMI install.\033[0m"
            echo "::notice::OMI package not found in repositories, skipping installation"
          fi
          echo "::endgroup::"

          echo "::group::Installing additional development dependencies..."
          echo -e "\033[36mInstalling development dependencies (libc6-dev, libssl-dev)...\033[0m"
          sudo apt-get install -y libc6-dev libssl-dev
          echo -e "\033[32mâœ“ Development dependencies installed successfully\033[0m"
          echo "::endgroup::"

          # Set LD_LIBRARY_PATH permanently for the runner session
          echo -e "\033[36mSetting LD_LIBRARY_PATH environment variable...\033[0m"
          echo "LD_LIBRARY_PATH=/opt/omi/lib:/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}" >> $GITHUB_ENV
          echo -e "\033[32mâœ“ Environment variable set successfully\033[0m"

          echo -e "\033[32mðŸŽ‰ Linux dependencies installed successfully!\033[0m"

      - name: Configure PowerShell Environment
        shell: pwsh
        run: |
          Write-Host "Configure PowerShell environment..." -ForegroundColor Green

          # Install dependent PowerShell modules
          Write-Host "Installing SqlServer module..." -ForegroundColor Cyan
          Install-PSResource -Name 'SqlServer' -Version '21.1.18256' -Scope 'CurrentUser' -Repository 'PSGallery' -TrustRepository
          Write-Host "âœ“ SqlServer module installed successfully" -ForegroundColor Green

          Write-Host "Installing PSDSC module..." -ForegroundColor Cyan
          Install-PSResource -Name 'PSDSC' -Scope 'CurrentUser' -Repository 'PSGallery' -TrustRepository
          Write-Host "âœ“ PSDSC module installed successfully" -ForegroundColor Green

          Write-Host "ðŸŽ‰ PowerShell environment configuration complete!" -ForegroundColor Green

      - name: Install DSCv3
        shell: pwsh
        run: |
          Write-Host "Install DSCv3 in environment..." -ForegroundColor Green

          # Install dependent PowerShell modules
          Write-Host "Installing DSCv3 executable..." -ForegroundColor Cyan
          Install-DscExe -IncludePrerelease -Force
          Write-Host "âœ“ DSCv3 installed successfully" -ForegroundColor Green

          Write-Host "ðŸŽ‰ DSCv3 install complete!" -ForegroundColor Green

      - name: Verify DSCv3
        shell: pwsh
        run: |
          Write-Host "Running DSCv3 to validate correct operation..." -ForegroundColor Green
          dsc --version

      - name: Install .NET Tools
        shell: pwsh
        run: |
          Write-Host 'Installing/Updating .NET tools...' -ForegroundColor Green

          # Install GitVersion for semantic versioning (idempotent)
          dotnet tool update --global GitVersion.Tool --version 5.* `
            || dotnet tool install --global GitVersion.Tool --version 5.*

          # Verify installation
          dotnet-gitversion /version

          Write-Host '.NET tools ready.' -ForegroundColor Green

      - name: Verify GitVersion
        shell: pwsh
        run: |
          Write-Host 'Running GitVersion to determine semantic version...' -ForegroundColor Green
          dotnet-gitversion
          Write-Host 'Running GitVersion to determine semantic version (parsing to PowerShell object)...' -ForegroundColor Green
          dotnet-gitversion | ConvertFrom-Json

      - name: Resolve Dependencies
        shell: pwsh
        run: |
          Write-Host 'Resolving project dependencies...' -ForegroundColor Green

          # Run dependency resolution
          ./build.ps1 -ResolveDependency -Tasks 'noop' -UseModuleFast -ErrorAction Stop

          Write-Host 'Dependencies resolved successfully.' -ForegroundColor Green

      - name: Build Module
        shell: pwsh
        run: |
          Write-Host "Building $env:MODULE_NAME module..." -ForegroundColor Green

          # Build the module
          ./build.ps1 -Tasks 'build' -ErrorAction Stop

          # Verify build output
          if (Test-Path -Path "output/builtModule/$env:MODULE_NAME")
          {
              Write-Host "Module built successfully at: output/builtModule/$env:MODULE_NAME" -ForegroundColor Green
              Get-ChildItem -Path "output/builtModule/$env:MODULE_NAME" -Recurse | Select-Object Name, Length | Format-Table
          }
          else
          {
              Write-Error 'Module build failed - output directory not found'
              exit 1
          }

      - name: Import Built Module
        shell: pwsh
        run: |
          Write-Host "Importing built $env:MODULE_NAME module..." -ForegroundColor Green

          ./build.ps1 -Tasks 'noop'
          Import-Module -Name $env:MODULE_NAME -Force

          # Verify module is loaded
          $module = Get-Module -Name $env:MODULE_NAME -ErrorAction SilentlyContinue

          if ($module)
          {
              Write-Host 'Module imported successfully:' -ForegroundColor Green
              Write-Host "  Name: $($module.Name)" -ForegroundColor Cyan
              Write-Host "  Version: $($module.Version)" -ForegroundColor Cyan
              Write-Host "  Path: $($module.Path)" -ForegroundColor Cyan

              # Show available commands
              $commands = @(Get-Command -Module $env:MODULE_NAME)
              if ($commands.Count -gt 0)
              {
                  Write-Host "  Exported Commands: $($commands.Count)" -ForegroundColor Cyan
                  Write-Host 'Available Commands:' -ForegroundColor Cyan

                  $commands |
                    Select-Object Name, ModuleName | Format-Table -AutoSize
              }
              else
              {
                  Write-Host 'No commands exported by the module.' -ForegroundColor Yellow
              }

              $dscResources = @(dsc resource list --adapter Microsoft.DSC/PowerShell --output-format json | ConvertFrom-Json)
              Write-Host "  Available class-based DSC Resources: $($dscResources.Count)" -ForegroundColor Cyan
              $dscResources
          }
          else
          {
              Write-Error 'Failed to import module'

              exit 1
          }
