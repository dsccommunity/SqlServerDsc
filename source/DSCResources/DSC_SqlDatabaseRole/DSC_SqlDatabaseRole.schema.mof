[ClassVersion("1.0.0.0"), FriendlyName("SqlDatabaseRole")]
class DSC_SqlDatabaseRole : OMI_BaseResource
{
    [Key, Description("The name of the _SQL Server_ instance to be configured.")] String InstanceName;
    [Key, Description("The name of the database in which the role should be configured.")] String DatabaseName;
    [Key, Description("The name of the database role to be added or removed.")] String Name;
    [Write, Description("The host name of the _SQL Server_ to be configured. Default value is the current computer name.")] String ServerName;
    [Write, Description("The members the database role should have. This parameter will replace all the current database role members with the specified members. Will only be used when parameter **Ensure** is set to `'Present'`.")] String Members[];
    [Write, Description("The members the database role should include. This parameter will only add members to a database role. Will only be used when parameter **Ensure** is set to `'Present'`. Can not be used at the same time as parameter **Members**.")] String MembersToInclude[];
    [Write, Description("The members the database role should exclude. This parameter will only remove members from a database role. Will only be used when parameter **Ensure** is set to `'Present'`. Can not be used at the same time as parameter **Members**.")] String MembersToExclude[];
    [Write, Description("If `'Present'` then the role will be added to the database and the role membership will be set. If `'Absent'` then the role will be removed from the database. Default value is `'Present'`."), ValueMap{"Present","Absent"}, Values{"Present","Absent"}] String Ensure;
    [Read, Description("Returns whether the database role members are in the desired state.")] Boolean MembersInDesiredState;
    [Read, Description("Returns if the database is updatable. If the database is updatable, this will return `$true`. Otherwise it will return `$false`.")] Boolean DatabaseIsUpdateable;
};
